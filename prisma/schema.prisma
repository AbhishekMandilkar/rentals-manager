generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your chosen database provider
  url      = env("DATABASE_URL")
}

model Loan {
  id               String      @id @default(uuid())
  borrowerName     String
  borrowerPhone    String
  amount           Float
  interestRate     Float
  dateLent         DateTime
  dateRepayment    DateTime
  status           LoanStatus
  repaymentMode    RepaymentMode
  userId           String      // Identifies the user who created the loan
  repayments       Repayment[] // Relation to repayment entries
  isDeleted        Boolean     @default(false) // Soft delete flag
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Repayment {
  id        String    @id @default(uuid())
  loanId    String
  loan      Loan      @relation(fields: [loanId], references: [id])
  date      DateTime
  amount    Float
  mode      RepaymentMode
  userId    String    // Identifies the user who recorded the repayment
  isDeleted Boolean   @default(false) // Soft delete flag
  createdAt DateTime  @default(now())
}

model Tenant {
  id         String        @id @default(uuid())
  name       String
  phone      String
  shopNumber String?       // Optional field
  rent       Float
  rentDueDate DateTime
  userId     String        // Identifies the user managing the tenant
  payments   RentPayment[] // Relation to rent payments
  isDeleted  Boolean       @default(false) // Soft delete flag
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model RentPayment {
  id        String    @id @default(uuid())
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  date      DateTime
  amount    Float
  userId    String    // Identifies the user who recorded the rent payment
  isDeleted Boolean   @default(false) // Soft delete flag
  createdAt DateTime  @default(now())
}

enum LoanStatus {
  ACTIVE
  REPAID
  OVERDUE
}

enum RepaymentMode {
  EMI
  ONETIME
}